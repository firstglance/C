Luminous

原 关于signal函数的返回值问题

mikucyy阅读数：5712018-08-18
今天看到了信号有关的章节，对其中的返回值的描述不太理解，也包括后面例程中提供的正规写法：

if (signal(SIGINT, sigint_handler)) == SIG_ERR) 
1
觉得这条if语句也有点搞不懂 
原文说的是：若成功则返回指向前次处理程序的指针，若出错则为SIG_ERR 
当时想不清楚signal调用后到底返回了什么，这条if语句怎么判断，后来用google找到一篇国外的博客解释的不错。其实主要是记住signal返回的是一个指向某个函数的指针，而这个函数就是上次处理这个信号的信号处理函数，如果未处理过，那就是NULL。测试代码如下：

#include <signal.h>
#include <assert.h>
#include <stdio.h>

void catch1(int signo) {
  printf("catch1 received signal %d\n", signo);
}

void catch2(int signo) {
  printf("catch2 received signal %d\n", signo);
}

int main(void) {
  sig_t prev_sigint_handler1 = signal(SIGINT, catch1);
  assert(prev_sigint_handler1 == NULL);

  sig_t prev_sighup_handler1 = signal(SIGHUP, catch2);
  assert(prev_sighup_handler1 == NULL);

  raise(SIGINT);  // calls catch1
  raise(SIGHUP);  // calls catch2

  // Now let's swap the handlers

  sig_t prev_sigint_handler2 = signal(SIGINT, catch2);
  assert(prev_sigint_handler2 == catch1);

  sig_t prev_sighup_handler2 = signal(SIGHUP, catch1);
  assert(prev_sighup_handler2 == catch2);

  raise(SIGINT);  // calls catch2
  raise(SIGHUP);  // calls catch1

  return 0;
}



% ./a.out
catch1 received signal 2
catch2 received signal 1
catch2 received signal 2
catch1 received signal 1

不难看出一开始两个handler1都为NULL，分别发送SIGINT和SIGHUP信号后，就指向了catch1和catch2。而再次调用signal后会分别得到两个handler，于是可以让新的handler2交换捕获的信号，就和指针的赋值一样了